Here we keep notes about the tests we will run on these vms. Once finished all
the TODOs, this will be probably moved to moztrap, or immediately and 
magically automated.

== On the host ==
1. Install the requirements:
  $ sudo apt-get install libvirt-bin qemu virtinst virt-manager

2. Install the apt cache:
  $ sudo apt-get install squid-deb-proxy

3. Enable the cache for launchpad's private ppas:
  See point 9 of the README.

4. Configure the vms:

  # This directory will be used as download cache for the Ubuntu images.
  $ mkdir ~/installers/ubuntu
  # This directory will store the disk images for the virtual machines.
  $ mkdir ~/images
  $ editor ~/vms.conf

  vm.ram_size=2048
  vm.cpus=2
  # Tweak the cpu model according to your needs
  vm.cpu_model=amd64
  vm.download_cache=~/installers/ubuntu
  vm.images_dir=~/images
  # Tweak according to your squid-deb-proxy setup, 8000 is the default port. 
  # Use {your-ip} or any address reachable by the vms (keeping in mind that
  # avahi's .local domain may not be up in the early stages of the install
  vm.apt_proxy = http://{your-ip}:8000
  vm.launchpad_id=your-launchpad-id
  # This is the ssh key of your host machine. Make sure that you have
  uploaded it to https://launchpad.net/~/+editsshkeys
  vm.ssh_authorized_keys = ~/.ssh/id_rsa.pub
  # This is the ssh key for your VMs. It might be safer if it's different from
  # your machine's key. Make sure that you have uploaded it to launchpad too.
  vm.ssh_keys=~/.ssh/rsa-vms
  # A default user (ubuntu) is created, here is its password
  vm.password = you-re-on-you-own-use-a-simple-or-complex-password
  # Go to https://launchpad.net/~/+archivesubscriptions to get the password for
  # the Ubuntu One hackers PPA. Click the View link on the PPA row, and on the
  # sources list entries you will see something like
  # https://your-launchpad-id:the-password@...
  ppa.ubuntuone_hackers.password=the-password

  sso.address=sso.local
  pay.address=pay.local
  u1.address=u1.local

5. Get the branch:

  $ bzr branch lp:u1-test-utils
  $ cd u1-test-utils/setup_vm

6. Download the image for the server (do so every time you want to use a
   fresh image):

  $ ./bin/setup_vm.py precise-server-pristine --download

# TODO use LXCs insteal of virtual machines for the servers.
7. Install the pristine server vm:

  $ ./bin/setup_vm.py raring-pristine --install

8. Download the image for the desktop (do so every time you want to use a
   fresh image)::

  $ ./bin/setup_vm.py raring-desktop-pristine --download

8. Install the pristine desktop vm:

  $ ./bin/setup_vm.py raring-pristine --install

# TODO now it might be better to start all the servers on the same VM.
9. Set the SSO server (Only needed for in-dash payments tests):

  $ ./bin/setup_vm.py sso --install
  $ virsh start sso
  $ ssh ubuntu@sso.local ~/bin/run-for-u1

10. Set up the Pay server (Only needed for in-dash payments tests):

  $ ./bin/setup_vm.py pay --install
  $ virsh start pay
  $ ssh ubuntu@pay.local ~/bin/run-for-u1

11. Set up the U1 server (Only needed for in-dash payments tests):

  $ ./bin/setup_vm.py u1 --install
  $ virsh start u1
  $ ssh ubuntu@u1.local ~/bin/run

12. Set up the Filesync server (Only needed for in-dash payments tests):

  TODO. See below the notes to set it up on the same u1 server.
  TODO. Explore how to set it up in a different server.

13. Set up the Music Search server:

  # This server runs on the same U1 server machine.
  $ ssh ubuntu@u1.local ~/bin/run-music-search

13. Install the Curuc√∫ server (Only needed for Smart Scopes tests):

  $ ./bin/setup_vm.py curucu --install
  $ virsh start curucu
  $ ssh ubuntu@curucu ./bin/run

14. Install the desktop machine that will run the tests:

  $ ./bin/setup_vm.py purchase-testing --install


Set up the in-dash payments tests against the local servers
===========================================================

This is for the happy path.

1. Sign in to the unity-prevalidation machine using virt-manager.

2. Kill syncdaemon if it is running. (As this is a pristine machine, this is not necessary)

3. Open seahorse and delete the Ubuntu One credentials, if present. (As this is a pristine machine, this is not necessary)

3. Log in with Staging Ubuntu SSO:

  # TODO: Currently we can just connect to production. This is a regression,
  # see bug http://pad.lv/1161067
  $ ~/bin/run-sso-client

  Click the "Log-in with my existing account." link.
  Fill the form with:
    # TODO we need to create the user with the API helpers on u1-test-utils.
    Email address: u1test+local-only@canonical.com
    Password: Hola123*
  Click the "Sign In" button.

  Autopilot test:
  http://bazaar.launchpad.net/~elopio/ubuntu-sso-client/autopilot/view/head:/ubuntu_sso/tests/acceptance/test_ubuntu_sso_client.py
  
4. Start syncdaemon:

  # TODO we currently don't have a filesync server.
  $ ~/bin/run-syncdaemon

5. Start the unity musicstore daemon:

  $ ~/bin/run-unity-lens-music

6. Start the control panel.

  # TODO probably not neccessary.

7. Add a credit card to the user.

  # Use the API helpers on u1-test-utils.
  # We still need to log in to the pay webiste first. See http://pad.lv/1144523

8. Enable the automatic payments for the user.

  # TODO wait for http://ur1.ca/d6z4n to land and then extend the u1-test-utils
  # API helpers to do this.

# For paypal payments, we would still need to do a lot of stuff on the website.
# TODO do we need to test paypal payments?

Run the in-dash payments tests against the local servers
===========================================================

This is the happy path.

1. Super+M.
2. Search for 'hendrix'.
3. Wait for the search to complete.
4. Click the first album
5. Click the Download button.
6. Enter the password.
7. Click the Purchase button.

All the tests are now documented in moztrap.

Set up the filesync server on the same machine as ubuntuone-servers
====================================================================

  # On the host
  $ ssh ubuntu@u1.local
  # On the vm.
  $ bzr branch lp:ubuntuone-filesync
  $ cd ubuntuone-filesync
  $ make link-sourcedeps
  $ editor lib/u1backends/db/config.py
  Change line 10 from:
  db_dir = os.path.abspath(os.path.join(get_tmpdir(), 'db1'))
  To:
  db_dir = os.path.abspath(
      os.path.join('/home/ubuntu/ubuntuone-servers/tmp', 'db1'))
  $ make start
  # Use ubuntuone-servers S4, statsd and AMQP.
  $ ln -s ../../ubuntuone-servers/tmp/rabbitmq-ubuntuone.port tmp/rabbitmq-ubuntuone.port
  $ ln -s ../../ubuntuone-servers/tmp/statsd.port tmp/statsd.port
  $ ln -s ../../ubuntuone-servers/tmp/s4.port tmp/s4.port
  $ make start-supervisor start-filesync-dummy-group
  # TODO we can also start-filesync-oauth-group. Ask #u1-di.

Set up the curucu server
========================

  # There is a dummy website that accesses the server:
  # https://productsearch.ubuntu.com/smartscopes/v1/dashmock?geo_store=US
  # On ~pedronis/curucu/canonistack-deploy, there's a README with the
  # instructios to deploy curucu on a canonistack machine with Juju.
  # TODO try to deploy it with juju on our vms.

Mounting guest disk images on the host
======================================

This requires root access (what did you expect ;-p) and the current
directory should contain the vm disk images.

apt-get install qemu-nbd

root@saw:/# modprobe nbd # once
root@saw:/# mkdir /mnt/disk1
root@saw:/# mkdir /mnt/seed

root@saw:/# qemu-nbd -c /dev/nbd0  raring-pristine.qcow2
root@saw:/# mount /dev/nbd0p1 /mnt/disk1
root@saw:/# umount /mnt/disk1/
root@saw:/# qemu-nbd -d /dev/nbd0

root@saw:/# qemu-nbd -c /dev/nbd1  raring-test.seed
root@saw:/# mount /dev/nbd1 /mnt/seed
mount: warning: /mnt/seed seems to be mounted read-only.
root@saw:/# umount /mnt/seed
root@saw:/# qemu-nbd -d /dev/nbd1
/dev/nbd1 disconnected
